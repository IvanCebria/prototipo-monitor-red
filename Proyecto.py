# Importar librer√≠as
import streamlit as st
import numpy as np
from sklearn.ensemble import IsolationForest
import matplotlib.pyplot as plt
import time

# --- Configuraci√≥n del Modelo ---
CONTAMINACION_ESPERADA = 'auto' # Proporci√≥n esperada de anomal√≠as
ESTADO_ALEATORIO = 42         # Para reproducibilidad

# --- Funciones Auxiliares ---

def detectar_anomalias(datos):
    """Aplica Isolation Forest y devuelve datos, predicciones e √≠ndices an√≥malos."""
    # Comprobar si hay datos suficientes para evitar errores
    if datos is None or len(datos) < 2: # Isolation Forest necesita al menos 2 puntos
        return datos, np.array([]), []
    # Asegurarse de que los datos son num√©ricos (podr√≠a fallar con datos del text_area mal formateados)
    try:
        datos_numeric = np.array(datos, dtype=float)
    except ValueError:
        st.error("Error: Los datos contienen valores no num√©ricos.")
        return datos, np.array([]), []

    X = datos_numeric.reshape(-1, 1)
    try:
        modelo_iforest = IsolationForest(contamination=CONTAMINACION_ESPERADA,
                                         random_state=ESTADO_ALEATORIO)
        modelo_iforest.fit(X)
        predicciones = modelo_iforest.predict(X)
        # Obtener los √≠ndices donde la predicci√≥n es -1 (anomal√≠a)
        anomalias_indices = np.where(predicciones == -1)[0]
        return datos_numeric, predicciones, anomalias_indices
    except Exception as e:
        st.error(f"Error durante el an√°lisis de ML: {e}")
        return datos_numeric, np.array([]), []


def sugerir_solucion(valor_anomalo):
    """Devuelve un texto de soluci√≥n basado en reglas simples para tr√°fico de red."""
    if not isinstance(valor_anomalo, (int, float)):
         return "Valor an√≥malo no num√©rico." # A√±adir chequeo b√°sico

    sugerencia = ""
    if valor_anomalo > 500000: # Umbral para pico extremo
        sugerencia = "Pico extremo de tr√°fico (>500KB/s). Posible DDoS o transferencia masiva. Sugerencias: Revisar IPs origen/destino (NetFlow/logs), aplicar ACLs/filtros, verificar actividad servidores."
    elif valor_anomalo < 1000: # Umbral para ca√≠da dr√°stica
        sugerencia = "Ca√≠da dr√°stica de tr√°fico (<1KB/s). Posible fallo de enlace/dispositivo. Sugerencias: Verificar estado f√≠sico interfaz, conectividad (ping), logs del dispositivo."
    elif valor_anomalo > 100000: # Umbral para tr√°fico elevado sostenido
         sugerencia = "Tr√°fico elevado sostenido (>100KB/s). Posible congesti√≥n o nueva carga. Sugerencias: Identificar aplicaciones/servicios responsables, revisar QoS, evaluar necesidad de m√°s ancho de banda."
    else:
        # Regla por defecto para otras anomal√≠as num√©ricas detectadas
        sugerencia = "Patr√≥n de tr√°fico inusual detectado. Sugerencias: Analizar logs y m√©tricas detalladas (NetFlow, SNMP) del periodo."
    return sugerencia

def crear_grafico(datos, anomalias_indices):
    """Crea y devuelve la figura de Matplotlib con el gr√°fico."""
    # Crear figura y ejes
    fig, ax = plt.subplots(figsize=(12, 6)) # Usar fig y ax es buena pr√°ctica

    # Comprobar si hay datos para graficar
    if datos is None or len(datos) == 0:
        ax.set_title("No hay datos para mostrar")
        return fig # Devuelve figura vac√≠a o con mensaje

    indices_tiempo = np.arange(len(datos))
    anomalias_valores = datos[anomalias_indices]

    # Dibujar l√≠nea de datos
    ax.plot(indices_tiempo, datos, marker='.', linestyle='-', color='cornflowerblue', label='Tr√°fico de Red (Bytes/s)')

    # Marcar las anomal√≠as si las hay
    if len(anomalias_indices) > 0:
        ax.scatter(anomalias_indices, anomalias_valores, color='red', s=100, label='Anomal√≠a Detectada', zorder=5)

    # Configurar el gr√°fico
    ax.set_title('Detecci√≥n de Anomal√≠as de Red (Isolation Forest) - Prototipo')
    ax.set_xlabel('√çndice de Tiempo (Simulado)')
    ax.set_ylabel('Tr√°fico de Red (Bytes/s)')
    ax.legend()
    ax.grid(True)
    # Usar escala logar√≠tmica si ayuda a la visualizaci√≥n
    if np.any(datos > 0): # Evitar error si todos los datos son 0 o negativos
        ax.set_yscale('log')

    return fig # Devuelve el objeto figura

# --- Interfaz Gr√°fica con Streamlit ---

st.set_page_config(layout="wide") # Usar ancho completo de la p√°gina
st.title("üìä Prototipo: Monitorizaci√≥n de Red con ML (Simplificado)")
st.write(f"Fecha y hora actual: {time.strftime('%Y-%m-%d %H:%M:%S')} CEST") # Hora actual

# Usar st.session_state para guardar los datos y resultados entre interacciones
if 'datos' not in st.session_state:
    # Datos simulados iniciales
    st.session_state.datos = np.array([
        25000, 30000, 28000, 35000, 40000, 38000, 42000, 39000, 150000,
        160000, 45000, 40000, 38000, 950000, 41000, 37000, 39000, 43000,
        500, 35000, 38000, 40000, 41000
    ])
if 'resultados' not in st.session_state:
    st.session_state.resultados = None

st.subheader("1. Datos de Red Simulados")
# Permitir al usuario ver/editar los datos para probar
datos_entrada_str = ", ".join(map(str, st.session_state.datos)) # Convertir array a string
nuevo_datos_str = st.text_area("Valores simulados (Bytes/s, separados por coma):",
                               datos_entrada_str, height=100)
# Intentar actualizar los datos desde el text_area
try:
    # Quitar espacios extra y convertir a entero, ignorar si est√° vac√≠o
    nuevos_datos_lista = [int(x.strip()) for x in nuevo_datos_str.split(',') if x.strip()]
    if nuevos_datos_lista: # Solo actualizar si no est√° vac√≠o
         st.session_state.datos = np.array(nuevos_datos_lista)
except ValueError:
    st.error("¬°Error! Aseg√∫rate de que todos los valores sean n√∫meros enteros separados por comas.")


st.subheader("2. An√°lisis de Anomal√≠as")

# Bot√≥n para iniciar el an√°lisis
if st.button("üîç Analizar Datos Simulados"):
    # Ejecutar an√°lisis solo si hay datos
    if 'datos' in st.session_state and len(st.session_state.datos) > 0:
        with st.spinner("Analizando..."): # Mostrar indicador de carga
            datos, preds, anom_idx = detectar_anomalias(st.session_state.datos)
            # Guardar los resultados en el estado de la sesi√≥n
            st.session_state.resultados = {
                "datos": datos,
                "predicciones": preds, # Guardamos predicciones por si las necesitamos
                "anomalias_indices": anom_idx
            }
        st.success("¬°An√°lisis completado!")
    else:
        st.warning("No hay datos para analizar. Introduce datos en el √°rea de texto.")

st.subheader("3. Resultados del An√°lisis")

# Mostrar los resultados solo si el an√°lisis se ha realizado
if st.session_state.resultados:
    st.write("Visualizaci√≥n de los datos y anomal√≠as detectadas:")
    # Crear y mostrar el gr√°fico usando st.pyplot
    figura_grafico = crear_grafico(st.session_state.resultados["datos"],
                                   st.session_state.resultados["anomalias_indices"])
    st.pyplot(figura_grafico)

    st.markdown("---") # Separador visual
    st.write("**Detalle de Anomal√≠as y Sugerencias de Soluci√≥n:**")
    indices_anomalos = st.session_state.resultados["anomalias_indices"]

    # Mostrar las sugerencias si se encontraron anomal√≠as
    if len(indices_anomalos) > 0:
        for idx in indices_anomalos:
            valor = st.session_state.resultados["datos"][idx]
            solucion = sugerir_solucion(valor)

            # Mostrar cada anomal√≠a y su sugerencia
            st.warning(f"**Anomal√≠a Detectada en √çndice {idx}:** Valor = {valor:,} Bytes/s") # Formato con comas
            st.info(f"**Sugerencia:** {solucion}")
            st.markdown("---") # Separador entre anomal√≠as
    else:
        # Mensaje si no hubo anomal√≠as
        st.success("‚úÖ No se detectaron anomal√≠as significativas en estos datos.")
else:
    # Mensaje inicial antes del primer an√°lisis
    st.info("Haz clic en 'Analizar Datos Simulados' para ver los resultados.")


# --- Para ejecutar esta aplicaci√≥n ---
# 1. Guarda este c√≥digo en un archivo llamado, por ejemplo, `app_monitor_web.py`.
# 2. Abre tu terminal.
# 3. Aseg√∫rate de tener activado tu entorno virtual (si usas uno).
# 4. Navega a la carpeta donde guardaste el archivo.
# 5. Ejecuta el comando: streamlit run app_monitor_web.py
# 6. Se abrir√° autom√°ticamente una pesta√±a en tu navegador web con la interfaz.